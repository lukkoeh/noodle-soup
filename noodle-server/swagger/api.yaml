openapi: 3.0.3
info:
  title: Noodle Backend
  version: "1.0"
  description: This is a server concept for the Noodle learning management system backend
tags:
  - name: user
    description: Operations about user
  - name: role
    description: Operations about permission groups (roles)
  - name: group
    description: Operations about user groups
  - name: course
    description: Operations about course rooms, content depends on it
  - name: content
    description: Operations about leaning content elements
  - name: files
    description: Operations about files
  - name: templates
    description: Operations about templates
  - name: branding
    description: Operations about branding, like colors and stuff
security:
  - cookieAuth: [ ]
paths:
  /users:
    get:
      tags:
        - user
      summary: Retrieve profile data of all users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access user data.
        '404':
          description: No users found
        '500':
          description: internal server error
  /users/{userId}:
    get:
      tags:
        - user
      summary: Retrieve user data
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access user data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    patch:
      tags:
        - user
      summary: Change user data
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailValidation'
        '401':
          description: You're not allowed to access user data.
        '409':
          description: Email is already taken.
        '500':
          description: internal server error
    delete:
      tags:
        - user
      summary: Delete user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access user data.
        '500':
          description: internal server error
  /users/{userId}/roles:
    get:
      tags:
        - user
      summary: Get roles of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's role data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    put:
      tags:
        - user
      summary: Replace roles of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: Role IDs
              items:
                type: integer
              example: [ 5,3,2 ]
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's role data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    post:
      tags:
        - user
      summary: Assign user to role(s)
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: Role IDs
              items:
                type: integer
              example: [ 5,3,2 ]
      responses:
        '201':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's role data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    delete:
      tags:
        - user
      summary: Delete role(s) of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of Role IDs"
              items:
                type: integer
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's role data.
        '404':
          description: User not found.
        '500':
          description: internal server error
  /users/{userId}/groups:
    get:
      tags:
        - user
      summary: Get groups of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's group data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    put:
      tags:
        - user
      summary: Replace groups of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: User group IDs
              items:
                type: integer
              example: [ 6,4,1 ]
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's group data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    post:
      tags:
        - user
      summary: Assign user to group(s)
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: User group IDs
              items:
                type: integer
              example: [ 6,2,3 ]
      responses:
        '201':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's role data.
        '404':
          description: User not found.
        '500':
          description: internal server error
    delete:
      tags:
        - user
      summary: Delete group(s) of user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of Group IDs"
              items:
                type: integer
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's group data.
        '404':
          description: User not found.
        '500':
          description: internal server error
  /user:
    get:
      tags:
        - user
      summary: Retrieve your user data
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access user data.
        '500':
          description: internal server error
    post:
      tags:
        - user
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '409':
          description: User already exists.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsValidation'
        '401':
          description: You're not allowed to access user data.
        '500':
          description: internal server error
  /user/roles:
    get:
      tags:
        - user
      summary: Get the role(s) you have
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access role data.
        '500':
          description: internal server error
  /user/groups:
    get:
      tags:
        - user
      summary: Get the group(s) you're in
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access user group data.
        '500':
          description: internal server error
  /roles/{roleId}:
    get:
      tags:
        - role
      summary: Get role by ID
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Role not found.
        '500':
          description: internal server error
    patch:
      tags:
        - role
      summary: Edit role
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDescription'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Role not found.
        '500':
          description: internal server error
    delete:
      tags:
        - role
      summary: Delete role
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Role not found.
        '500':
          description: internal server error
  /roles/{roleId}/users:
    get:
      tags:
        - role
      summary: Get users with role
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Role not found.
        '500':
          description: internal server error
    put:
      tags:
        - role
      summary: Replace users having role
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: User IDs
              items:
                type: integer
              example: [ 6,4,1 ]
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this group's data.
        '404':
          description: Group not found.
        '500':
          description: internal server error
    post:
      tags:
        - role
      summary: Assign users(s) to role
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of User IDs"
              items:
                type: integer
      responses:
        '201':
          description: successful operation
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
    delete:
      tags:
        - role
      summary: Unassign roles from user(s)
      parameters:
        - in: path
          name: roleId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of User IDs"
              items:
                type: integer
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's group data.
        '404':
          description: User not found.
        '500':
          description: internal server error
  /roles:
    get:
      tags:
        - role
      summary: Get all role(s)
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
    post:
      tags:
        - role
      summary: Create role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleDescription'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '409':
          description: Role already exists.
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
  /groups/{groupId}:
    get:
      tags:
        - group
      summary: Get user group by ID
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Group not found.
        '500':
          description: internal server error
    patch:
      tags:
        - group
      summary: Edit user group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupDescription'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Group not found.
        '500':
          description: internal server error
    delete:
      tags:
        - group
      summary: Delete user group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Group not found.
        '500':
          description: internal server error
  /groups/{groupId}/users:
    get:
      tags:
        - group
      summary: Get users in group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '404':
          description: Group not found.
        '500':
          description: internal server error
    put:
      tags:
        - group
      summary: Replace users in group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: User IDs
              items:
                type: integer
              example: [ 6,4,1 ]
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this group's data.
        '404':
          description: Group not found.
        '500':
          description: internal server error
    post:
      tags:
        - group
      summary: Assign users to user group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of User IDs"
              items:
                type: integer
      responses:
        '201':
          description: successful operation
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
    delete:
      tags:
        - group
      summary: Remove user(s) from group
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: "Array of User IDs"
              items:
                type: integer
      responses:
        '200':
          description: successful operation
        '400':
          description: Malformed request
        '401':
          description: You're not allowed to access this user's group data.
        '404':
          description: User not found.
        '500':
          description: internal server error
  /groups:
    get:
      tags:
        - group
      summary: Get all user group(s)
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
    post:
      tags:
        - group
      summary: Create user group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupDescription'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        '409':
          description: User group already exists.
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
  /courses:
    get:
      tags:
        - course
      summary: Get all Courses that you have access to
      responses:
        200:
          description: Returns all courses as JSON Objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCollection'
    post:
      tags:
        - course
      summary: Create a new course, by default empty, optionally with content
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreationRequest'
      responses:
        200:
          description: Course was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        500:
          description: The server exploded while processing the request
  /course/{courseId}:
    get:
      tags:
        - course
      summary: Get details for course
      responses:
        200:
          description: Returns the course data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request
    put:
      tags:
        - course
      summary: Edit course details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        200:
          description: The course was edited and is now in sync with the client
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request
    delete:
      tags:
        - course
      summary: Delete a course
      responses:
        200:
          description: The course was deleted
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request

  /course/{courseId}/content:
    get:
      tags:
        - content
      summary: Get all content elements from a course by courseId
      responses:
        200:
          description: Returns all the content from a course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentElementCollection'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Resource not found for this uid
        500:
          description: The server exploded while processing the request
    post:
      tags:
        - content
      summary: Create a new content element inside a course
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentElementCreationRequest'
      responses:
        200:
          description: Returns the newly created content resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentElement'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request
    put:
      tags:
        - content
      summary: Update a content element
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentElement'
      responses:
        200:
          description: Returns the updated content resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentElement'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request
    delete:
      tags:
        - content
      summary: Delete a content element from a course
      responses:
        200:
          description: Resource deleted successfully
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No course found for this uid
        500:
          description: The server exploded while processing the request
  /files:
    get:
      tags:
        - files
      summary: Get all files of the instance with their ids
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileCollection'
        204:
          description: No files found, but successful otherwise
        400:
          description: Bad Request
        404:
          description: Resource not found, something has gone wrong
        500:
          description: Internal Server Error
        401:
          description: Unauthorized
  /file/{file_uid}:
    get:
      tags:
        - files
      summary: Get a file by uid and its contents
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: No file found for this uid
        500:
          description: The server exploded while processing the request
    post:
      tags:
        - files
      summary: Upload a new file, and obtain its new uid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileCreationRequest"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
    put:
      tags:
        - files
      summary: Replace a file, without altering the uid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        200:
          description: Successful replacement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
    delete:
      tags:
        - files
      summary: Delete a file by uid, also deletes relations to it
      responses:
        200:
          description: File deleted
        400:
          description: Bad Request
        404:
          description: I have never seen this file in my entire life
        500:
          description: The server crashed
  /design:
    get:
      tags:
        - branding
      description: Returns the asset image data as well as the accent color hex code. Authentication handles the assignment of accounts.
      responses:
        200:
          description: Returns the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branding'
        '400':
          description: Invalid request
        '401':
          description: Access Denied.
        '500':
          description: internal server error
  /templates:
    get:
      tags:
        - templates
      description: Get all templates accesible by the user
      parameters:
        - in: query
          name: owned
          schema:
            type: boolean
          description: Query the owned or all visible templates, owned = true means only owned
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateCollection'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
  /template/{template_id}:
    get:
      tags:
        - templates
      description: Return a single template
      parameters:
        - in: path
          name: template_id
          schema:
            type: integer
          description: The specific ID of the template to be queried
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
    post:
      tags:
        - templates
      description: Creates a template
      parameters:
        - in: path
          name: template_id
          schema:
            type: integer
          description: The specific ID of the template to be queried
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreationRequest'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
    put:
      tags:
        - templates
      description: Uploads a single template
      parameters:
        - in: path
          name: template_id
          schema:
            type: integer
          description: The specific ID of the template to be queried
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
    delete:
      tags:
        - templates
      parameters:
        - in: path
          name: template_id
          schema:
            type: integer
          description: The specific ID of the template to be queried
      responses:
        200:
          description: Successful
        400:
          description: Bad Request
        401:
          description: No Access Permission to this resource
        404:
          description: Something was not found
        500:
          description: The server exploded while processing the request
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: BLOODLESSNESS
  schemas:
    User:
      type: object
      properties:
        firstname:
          type: string
          example: theUser
        lastname:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    UserProfile:
      type: object
      properties:
        userId:
          type: integer
          example: 69
        firstname:
          type: string
          example: theUser
        lastname:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
    CredentialsValidation:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/EmailValidation'
        password:
          $ref: '#/components/schemas/PasswordValidation'
    PasswordValidation:
      type: object
      properties:
        tooShort:
          type: boolean
          example: true
        uppercaseMissing:
          type: boolean
          example: false
        lowercaseMissing:
          type: boolean
          example: true
        digitMissing:
          type: boolean
          example: false
        specialMissing:
          type: boolean
          example: true
    EmailValidation:
      type: object
      properties:
        tooShort:
          type: boolean
          example: true
        tooLong:
          type: boolean
          example: false
        illegalChar:
          type: boolean
          example: true
        invalidFormat:
          type: boolean
          example: false
    RoleDescription:
      type: object
      properties:
        name:
          type: string
          example: "Dozent"
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
          example: "[{subject: \"user\", ops: 0b1100}, {subject: \"role\", ids: [1,3,4], ops: 0b0011}]"
    Role:
      allOf:
        - type: object
          properties:
            roleId:
              type: integer
              example: 1
        - $ref: '#/components/schemas/RoleDescription'
    Permission:
      type: object
      required: [ "subject", "ops" ]
      properties:
        subject:
          type: string
          description: type of resource to be managed
          example: "user"
        ids:
          type: array
          items:
            type: integer
          description: ids of resource to be managed
          example: [ 1,2,3 ]
        ops:
          type: integer
          description: "4 bit integer (0 - 15), 1st (rightmost) bit: create, 2nd bit: read, 3rd bit: update, 4th bit: delete"
          example: 0b1001
    UserGroupDescription:
      type: object
      properties:
        name:
          type: string
          example: "Psychologie"
        type:
          type: string
          example: "subject"
    UserGroup:
      allOf:
        - type: object
          properties:
            groupId:
              type: integer
              example: 1
        - $ref: '#/components/schemas/UserGroupDescription'
      type: object
    CourseCollection:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    Course:
      type: object
      properties:
        uid:
          type: integer
          description: Unique ID of the course
        name:
          type: string
          description: Name of the course
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContentElement'
    CourseCreationRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the course
        content:
          type: array
          description: optional content
          items:
            $ref: '#/components/schemas/ContentElementCreationRequest'

    ContentElement:
      type: object
      properties:
        uid:
          type: integer
          description: Unique ID of the content element
        course_id:
          type: integer
          description: ID of the assigned course
        type:
          type: string
          description: content_type as a string which is mapped to a rendering definition on device
        content:
          type: string
          description: Encoded content of the content element (Like text in Markdown -> Base64), used by the renderer
        files:
          type: array
          description: Array of file references (PDF, IMAGE) to be requested seperately to keep request slim
          items:
            $ref: '#/components/schemas/FileReference'
    ContentElementCreationRequest:
      type: object
      properties:
        type:
          type: string
          description: content_type as a string which is mapped to a rendering definition on device
        content:
          type: string
          description: Encoded content of the content element (Like text in Markdown -> Base64), used by the renderer
        files:
          type: array
          description: Array of file creationRequests (PDF, IMAGE) to be requested seperately to keep request slim
          items:
            $ref: '#/components/schemas/FileCreationRequest'
    ContentElementCollection:
      type: array
      items:
        $ref: '#/components/schemas/ContentElement'
    FileReference:
      type: object
      properties:
        target_uid:
          type: integer
    File:
      type: object
      properties:
        uid:
          type: integer
          description: File Uid to be referenced by FileReference
        type:
          type: string
          description: The mime type of the file, like image/jpeg
        data:
          type: string
          description: file data in bytes, or in base64...
        last_modified:
          type: string
          description: ISO String of last modification time, used for caching
    FileCreationRequest:
      type: object
      properties:
        type:
          type: string
          description: The mime type, such as image/jpeg
        data:
          type: string
          description: File Data in bytes or base64
    FileCollection:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
    Template:
      type: object
      properties:
        uid:
          description: Unique ID for templates
          type: integer
          example: 1234
        name:
          description: the template name
          type: string
          example: "Klassischer Kurs"
        collection:
          $ref: '#/components/schemas/ContentElementCollection'
        owner:
          description: Owner User ID
          type: integer
          example: 69
        users:
          type: array
          description: Array of User IDs capable of READING the element
          items:
            type: integer
            description: User ID
            example: 420
    TemplateCreationRequest:
      type: object
      properties:
        name:
          description: the template name
          type: string
          example: "Klassischer Kurs"
        collection:
          $ref: '#/components/schemas/ContentElementCollection'
        owner:
          description: Owner User ID
          type: integer
          example: 69
        users:
          type: array
          description: Array of User IDs capable of READING the element
          items:
            type: integer
            description: User ID
            example: 420
    TemplateCollection:
      type: array
      items:
        $ref: '#/components/schemas/Template'
    Branding:
      type: object
      properties:
        color:
          type: string
          example: "#fafafa"
        image:
          $ref: '#/components/schemas/FileReference'